__author__ = "Homa Papoli Yazdi"
__email__ = "homa.papoli_yazdi@biol.lu.se"

configfile: "config/config.yaml"
localrules: all, multiqc, multiqc_after_filtering, multiqc_after_filtering_bbtools, create_intervals
genome_name=config["genome"]

#----------------------------------------------------------------------------#
#--------------------Import Python modules-----------------------------------#
#----------------------------------------------------------------------------#
import pandas as pd
import os
#----------------------------------------------------------------------------#
#--------------------Reading design table------------------------------------#
#----------------------------------------------------------------------------#
design_table = pd.read_table(config["sample_table"], sep="\t")
sample_name = design_table.Sample_Name
fastq_name = design_table.Fastq_Name
#--------------------Function to get Read Group for each sample--------------#
def get_readgroup(sample_name):
    read_group = pd.read_table("config/ReadGroup.txt", sep="\t")
    read_group_dict = dict(read_group.values)
    return read_group_dict[sample_name]
#----------------------------------------------------------------------------#

rule all:
    input: 
        html_output = expand([
        "data/genome/{genome}.fasta",
        "results/fastqc/{sample}_{pair}_001_fastqc.html",
        "results/multiqc/multiqc_report.html",
        "data/fastq_filtered/{sample}_R1_001.filtered.fastq.gz",
        "data/fastq_filtered/{sample}_R2_001.filtered.fastq.gz",
        "results/fastp_report/{sample}.html",
        "results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.html",
        "results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.zip",
        "results/multiqc_filtered/multiqc_report.html",
        "data/genome/{genome}.fasta.amb",
        "data/genome/{genome}.fasta.ann",
        "data/genome/{genome}.fasta.bwt",
        "data/genome/{genome}.fasta.pac",
        "data/genome/{genome}.fasta.sa",
        "data/genome/{genome}.dict",
        "data/genome/{genome}.fasta.fai",
        "results/mapped/{sample}.sorted.bai",
        "results/mapped/{sample}.flagstats.txt",
        "results/mapped/{sample}.idxstat.txt",
        "results/mapped_dedup/{sample}.dedup.bam",
        "results/mapped_dedup/{sample}.metrics.txt"
        ], \
        sample=fastq_name, pair=config["pair"], genome=config["species"], num=[i for i in range(1, 2)])#17)])

#         "config/intervals/interval_{num}.bed",
#         "data/genome/{genome}.dict",
#         "data/genome/{genome}.fasta.fai",
#         "results/gvcf/{sample}/{sample}.{num}.gvcf"

rule edit_assemblies:
    input:
        genome = os.path.join("data/genome", (genome_name+".fasta"))
    output:
        edited_genome = "data/genome/{genome}.fasta",
        genome_stats = "data/genome/{genome}.stats.txt"
    params:
        species = "Lbolanderi"
    shell:
        """
        python workflow/scripts/assembly_stats.py {params.species} {input.genome} {output.edited_genome} {output.genome_stats}
        """

rule fastqc:
    input:
       fastq="data/fastq/{sample}_{pair}_001.fastq.gz",
    output:
        fastqc_html="results/fastqc/{sample}_{pair}_001_fastqc.html",
        fastqc_zip="results/fastqc/{sample}_{pair}_001_fastqc.zip"
    params:
        outdir="results/fastqc"
    resources:
        threads = 1,
        runtime = "3h"
    singularity:
        "containers/fastqc_0.12.1.sif"
    shell:
        """
        fastqc {input} \
        --outdir {params.outdir} \
        --kmers 7 
        """

rule multiqc:
    input:
        expand("results/fastqc/{sample}_{pair}_001_fastqc.zip", sample=fastq_name, pair=config["pair"])
    output:
        "results/multiqc/multiqc_report.html"
#    conda:
#        "envs/multiqc.yaml"
    singularity:
        "containers/multiqc_v1.25.sif"
    shell:
        "multiqc results/fastqc/*fastqc.zip -o results/multiqc"

rule filtering_fastp:
    input:
        fastq1="data/fastq/{sample}_R1_001.fastq.gz",
        fastq2="data/fastq/{sample}_R2_001.fastq.gz"
    output:
        fastq1_filtered="data/fastq_filtered/{sample}_R1_001.filtered.fastq.gz",
        fastq2_filtered="data/fastq_filtered/{sample}_R2_001.filtered.fastq.gz",
        unpaired1="data/fastq_unpaired/{sample}_unpaired1.fastq.gz",
        unpaired2="data/fastq_unpaired/{sample}_unpaired2.fastq.gz",
        failed_out="data/fastq_failed/{sample}.failed.fastq.gz",
        html_report="results/fastp_report/{sample}.html"
    resources:
        threads=10,
        runtime="12h"
    singularity:
        "containers/fastp_0.23.4.sif"
    shell:
        """
        fastp \
        --in1 {input.fastq1} \
        --in2 {input.fastq2} \
        --out1 {output.fastq1_filtered} \
        --out2 {output.fastq2_filtered} \
        --unpaired1 {output.unpaired1} \
        --unpaired2 {output.unpaired2} \
        --failed_out {output.failed_out} \
        --html {output.html_report} \
        --trim_poly_g 12 \
        --qualified_quality_phred=20 \
        --unqualified_percent_limit=40 \
        --length_required=140 \
        --overrepresentation_analysis \
        --adapter_sequence="AGATCGGAAGAGCACACGTCTGAACTCCAGTCA" \
        --adapter_sequence_r2="AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT" \
        --thread {resources.threads}
        """

rule fastqc_after_filtering:
    input:
       fastq="data/fastq_filtered/{sample}_{pair}_001.filtered.fastq.gz"
    output:
        fastqc_html="results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.html",
        fastqc_zip="results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.zip"
    params:
        outdir="results/fastqc_filtered",
        sample_adapter="data/adapters/adapters.txt"
    resources:
        threads = 1,
        runtime = "3h"
    singularity:
        "containers/fastqc_0.12.1.sif"
    shell:
        """
        fastqc {input} \
        --threads {resources.threads} \
        --outdir {params.outdir} \
        --kmers 7 \
        --adapters {params.sample_adapter}
        """

rule multiqc_after_filtering:
    input:
        expand("results/fastqc_filtered/{sample}_{pair}_001.filtered_fastqc.zip", sample=fastq_name, pair=config["pair"])
    output:
        "results/multiqc_filtered/multiqc_report.html"
    singularity:
        "containers/multiqc_v1.25.sif"
    shell:
        "multiqc results/fastqc_filtered/*filtered_fastqc.zip -o results/multiqc_filtered"

# ---------------------------------------------------------------------------------------------#
# Create Genome Indices
# ---------------------------------------------------------------------------------------------#
rule bwa_index:
    input:
        "data/genome/{genome}.fasta",
    output:
        idx=multiext("data/genome/{genome}.fasta", ".amb", ".ann", ".bwt", ".pac", ".sa")
    resources:
        threads= 10,
        runtime= "2h"
    singularity:
        "containers/bwa_0.7.18.sif"
    shell:
        """
        bwa index {input}
        """

rule createSeqdict:
    input:
        genome_fasta="data/genome/{genome}.fasta"
    output:
        genome_fasta_dict="data/genome/{genome}.dict"
    resources:
        threads=4,
        runtime="5h",
        tmpdir="$SNIC_TMP"
    singularity:
        "containers/picard_3.2.0.sif"
    shell:
        """
        picard CreateSequenceDictionary \
        --REFERENCE {input} \
        --OUTPUT {output}
        """

rule createSeqfai:
    input:
        genome_fasta="data/genome/{genome}.fasta"
    output:
        genome_index="data/genome/{genome}.fasta.fai"
    resources:
        threads= 4,
        runtime= "2h",
        tmpdir="$SNIC_TMP"
    singularity:
        "containers/samtools_1.20.c.sif"
    shell:
        """
        samtools faidx {input}
        """
# ---------------------------------------------------------------------------------------------#
# Mapping
# ---------------------------------------------------------------------------------------------#
rule bwa_mem:
    input:
        fastq1="data/fastq_filtered/{sample}_R1_001.filtered.fastq.gz",
        fastq2="data/fastq_filtered/{sample}_R2_001.filtered.fastq.gz",
        genome_fasta="data/genome/{genome}.fasta"
    output:
        sam=temp("results/mapped/{sample}.sam")
    params:
        readgroup=lambda wildcards: get_readgroup(wildcards.sample)
    resources:
        threads= 18,
        runtime= "18h",
        mem_mb= 115200,
        tmpdir="$SNIC_TMP"
    singularity:
        "containers/bwa_0.7.18.sif",
    shell:
        """
        bwa mem -M -t {resources.threads} -R {params.readgroup} {input.genome_fasta} {input.fastq1} {input.fastq2} > {output.sam}
        """
# ---------------------------------------------------------------------------------------------#
# SAM to BAM - Sorting - Getting BAM statistics
# ---------------------------------------------------------------------------------------------#
rule samtools_sam:
    input:
        sam="results/mapped/{sample}.sam"
    output:
        bam=temp("results/mapped/{sample}.sorted.bam"),
        bai="results/mapped/{sample}.sorted.bai",
        flagstats="results/mapped/{sample}.flagstats.txt",
        idxstat="results/mapped/{sample}.idxstat.txt"
    resources:
        threads= 10,
        runtime= "10h",
        tmpdir="$SNIC_TMP"
    singularity:
        "containers/samtools_1.20.c.sif"
    shell:
        """
        samtools flagstat {input.sam} > {output.flagstats}
        samtools sort {input.sam} -T {resources.tmpdir} -O BAM | tee {output.bam} | samtools index - {output.bai}
        samtools idxstats {output.bam} > {output.idxstat}
        """
# ---------------------------------------------------------------------------------------------#
# Mark duplicates in BAM file
# ---------------------------------------------------------------------------------------------#
rule markduplicates_bam:
    input:
        bam="results/mapped/{sample}.sorted.bam"
    output:
        dedupBam=protected("results/mapped_dedup/{sample}.dedup.bam"),
        metrics="results/mapped_dedup/{sample}.metrics.txt"
    resources:
        threads=20,
        mem_mb=120000,
        runtime="12h",
        tmpdir="$SNIC_TMP"
    params:
        mem= "-Xmx120g"
    benchmark:
        "benchmark/mapped_dedup/{sample}.picardMarkDuplicates.txt"
    singularity:
        "containers/picard_3.2.0.sif"
    shell:
        """
        java {params.mem} -jar /usr/picard/picard.jar MarkDuplicates --INPUT {input} --OUTPUT {output.dedupBam} --METRICS_FILE {output.metrics} --TMP_DIR {resources.tmpdir} \
        --VALIDATION_STRINGENCY LENIENT \
        --ASSUME_SORT_ORDER coordinate \
        --CREATE_INDEX TRUE
        """

# Create a list of intervals for scaffolds larger than 1000 bp to use with Haplotype Caller:
# rule create_intervals:
#     input:
#         genome="data/genome/{genome}"
#     output:
#         intervals=expand("config/intervals/interval_{num}.bed", num=[i for i in range(1, 17)])
#     params:
#         min_scaf_len = 1000,
#         num_scafs_per_interval = 4
#     shell:
#         """
#         python workflow/scripts/split_fasta.py data/genome/{genome}.fasta {params.min_scaf_len} {params.num_scafs_per_interval} "config/intervals"
#         """

# rule HaplotypeCaller_gvcf:
#     input:
#         genome_fasta="data/genome/{genome}.fasta",
#         genome_fasta_dict="data/genome/{genome}.dict",
#         genome_index="data/genome/{genome}.fasta.fai",
#         bam="results/mapped_dedup/{sample}.dedup.bam"
#     output:
#         gvcf="results/gvcf/{sample}/{sample}.{num}.gvcf"
#     resources:
#         threads=10,
#         mem_mb=64000,
#         runtime="48h",
#         tmpdir="$SNIC_TMP"
#     params:
#         mem= "-Xmx64g",
#         interval="config/intervals/interval_{num}.bed"
#     benchmark:
#         "benchmark/gatk_haplotypecaller/{sample}.{num}.gatkHaplotypeCaller.txt"
#     singularity:
#         "containers/gatk_4.6.0.0.sif"
#     shell:
#         """
#         gatk --java-options {params.mem} HaplotypeCaller \
#         -R {input.genome_fasta} \
#         -L {params.interval} \
#         -I {input.bam} \
#         -O {output} \
#         --tmp-dir {resources.tmpdir} \
#         -ERC GVCF
#         """

# rule create_gdb_mapfile:
#     input:
#         gvcf="results/gvcf/${sample}/${sample}.interval_${interval}.gvcf"
#     output:
#         sample_map="config/sample_map/interval_{num}.sample_map"
#     shell:
#     """
#         for interval in {1..70}
#         do
#         cat sample_design_table.tsv | while read line
#         do 
#         sample=$(echo $line | cut -f1 -d " ")
#         echo -e ${sample}'\t'results/gvcf/${sample}/${sample}.interval_${interval}.gvcf \
#         >> config/sample_map/interval_${interval}.sample_map 
#         done
#         done
#     """


# # Let's do two types of genotyping.One with all samples together, and one per each family.
# rule genomicsdbimport:
#     input:
#         sample_map="config/sample_map/interval_{num}.sample_map"
#     output:
#         db=directory("results/genomicsdb/interval_{num}_gdb")
#     resources:
#         threads=10,
#         mem_mb=64000,
#         runtime="48h",
#         tmpdir="$SNIC_TMP"
#     params:
#         mem= "-Xmx64g",
#         interval="config/intervals/interval_{num}.bed"
#     benchmark:
#         "benchmark/gatk_haplotypecaller/{sample}.{num}.genomicsdbimport.txt"
#     singularity:
#         "containers/gatk_4.6.0.0.sif"
#     shell:
#         """
#         gatk --java-options {params.mem} GenomicsDBImport \
#         --genomicsdb-workspace-path {output} \
#         --intervals {params.interval} \
#         --batch-size 50 \
#         --sample-name-map {input.sample_map} \
#         --tmp-dir {resources.tmpdir} \
#         --reader-threads {resources.threads}
#         """

# rule GenotypeGVCFs:
#     input:
#         db="results/genomicsdb/interval_{num}_gdb"
#         genome_fasta="data/genome/{genome}.fasta"
#     output:
#         vcf="results/vcf/ostrich_families_{num}.vcf"
#     resources:
#         threads=10,
#         mem_mb=64000,
#         runtime="48h",
#         tmpdir="$SNIC_TMP"
#     params:
#         mem= "-Xmx64g",
#         interval="config/intervals/interval_{num}.bed"
#     benchmark:
#         "benchmark/gatk_haplotypecaller/{sample}.{num}.genotypeGVCF.txt"
#     singularity:
#         "containers/gatk_4.6.0.0.sif"
#     shell:
#         """
#         gatk --java-options {params.mem} GenotypeGVCFs \
#         -R {input.genome_fasta} \
#         -V gendb://{input.db} \
#         -O {output}
#         --tmp-dir {resources.tmpdir}
#         """


